// use gradlew -Penv=${env} to pass
def env = hasProperty('env') ? env : null

apply plugin: 'application'
mainClassName = 'Main'

tasks.named("processResources").configure {
    if (env != null) {
        assert project.file("conf/${env}/resources").exists()
        inputs.dir project.file("conf/${env}/resources")
        from "conf/${env}/resources"
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

tasks.named("test").configure {
    inputs.files(fileTree("conf"))
}

tasks.named("distTar").configure {
    archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}

tasks.named("distZip").configure {
    enabled = false
}

tasks.named("startScripts").configure {
    defaultJvmOpts = ['-Dcore.webPath=APP_HOME_VAR/web', "-Dcore.appName=${applicationName}"]

    doLast {
        windowsScript.text = windowsScript.text.replaceFirst('APP_HOME_VAR', '%APP_HOME%')
        unixScript.text = unixScript.text.replaceFirst('APP_HOME_VAR/web', '\'\\$APP_HOME/web\'')
    }
}

tasks.named("run").configure {
    // assign all system properties to application, e.g. ./gradlew -Dkey=value :some-service:run
    System.properties.each { key, value ->
        if (key != "user.dir" && key != "java.endorsed.dirs") {
            systemProperty key as String, value
        }
    }
}

tasks.named('mkdir') {
    doLast {
        mkdir("${projectDir}/conf/dev/resources")
    }
}

afterEvaluate {
    // split dependencies lib and app classes/bin/web to support layered docker image
    // to cache/reuse dependencies layer
    tasks.register('docker') {
        group = 'distribution'
        dependsOn installDist
        doLast {
            def rootGroup = parent.depth > 0 ? parent.group : project.group;
            project.sync {
                from(installDist.destinationDir) {
                    exclude "lib/${rootGroup}.*.jar"
                    exclude 'bin'
                    exclude 'web'
                    into('dependency')
                }
                from(installDist.destinationDir) {
                    include "lib/${rootGroup}.*.jar"
                    include 'bin/**'
                    include 'web/**'
                    into('app')
                }
                into "${buildDir}/docker/package"
            }
            if (project.file('docker/Dockerfile').exists()) {
                project.sync {
                    from project.file('docker')
                    into "${buildDir}/docker"
                    preserve {
                        include 'package/**'
                    }
                }
            }
        }
    }
}
